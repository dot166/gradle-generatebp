/*
 * SPDX-FileCopyrightText: 2025 The LineageOS Project
 * SPDX-License-Identifier: Apache-2.0
 */

package org.lineageos.generatebp.utils

import org.lineageos.generatebp.models.License
import org.lineageos.generatebp.models.ModuleIdentifier
import org.lineageos.generatebp.models.ModuleQuirk

object Constants {
    const val SHARED_LIBS_HEADER = "// DO NOT EDIT THIS SECTION MANUALLY"

    val libsAndroidBpHeader = buildString {
        append("//\n")
        append(
            ReuseUtils.generateReuseCopyrightContent(
                listOf(License.APACHE_2_0),
                listOf("The LineageOS Project"),
                initialYear = null,
                addNewlineBetweenCopyrightAndLicense = false,
                addEndingNewline = false,
            ).prependIndent("// ")
        )
        append("\n")
        append("//\n")
        append("\n")
        append("// DO NOT EDIT THIS FILE MANUALLY\n")
    }

    /**
     * Per `prebuilts/sdk/update_prebuilts/update_prebuilts.py`:
     * ```python
     * # Suffixes used by KMP artifacts. If an artifact in maven_to_make ends with one
     * # of these, it will replace the anchor artifact.
     * kmp_suffixes = ['android','jvm']
     * ```
     */
    private val androidXKmpSuffixes = setOf(
        "-android",
        "-jvm",
    )

    /**
     * Return the [ModuleQuirk] to apply to this [ModuleIdentifier].
     */
    fun ModuleIdentifier.getModuleQuirk() = when (group) {
        "org.jetbrains.kotlin" -> when (name) {
            "kotlin-bom" -> ModuleQuirk.IGNORE
            "kotlin-stdlib-common" -> ModuleQuirk.INHERIT_DEPENDENCIES
            else -> null
        }

        else -> null
    }

    /**
     * Get the name of this module in the AOSP build system.
     */
    fun ModuleIdentifier.getAospAvailableModuleName() = fixupAndroidXKmpSuffix() ?: when (group) {
        "androidx.constraintlayout" -> when (name) {
            "constraintlayout" -> "androidx-constraintlayout_constraintlayout"
            else -> null
        }

        "androidx.test.espresso" -> when (name) {
            "espresso-accessibility" -> "androidx.test.espresso.accessibility"
            "espresso-contrib" -> "androidx.test.espresso.contrib"
            "espresso-core" -> "androidx.test.espresso.core"
            "espresso-idling-resource" -> "androidx.test.espresso.idling-resource"
            "espresso-intents" -> "androidx.test.espresso.intents"
            "espresso-web" -> "androidx.test.espresso.web"
            else -> null
        }

        "com.adobe.xmp" -> when (name) {
            "xmpcore" -> "xmp_toolkit"
            else -> null
        }

        "com.github.bumptech.glide" -> when (name) {
            "glide" -> "glide"
            else -> null
        }

        "com.google.auto.value" -> when (name) {
            "auto-value-annotations" -> "auto_value_annotations"
            else -> null
        }

        "com.google.code.findbugs" -> when (name) {
            "jsr305" -> "jsr305"
            else -> null
        }

        "com.google.code.gson" -> when (name) {
            "gson" -> "gson"
            else -> null
        }

        "com.google.errorprone" -> when (name) {
            "error_prone_annotations" -> "error_prone_annotations"
            "error_prone_core" -> "error_prone_core"
            else -> null
        }

        "com.google.dagger" -> when (name) {
            "dagger" -> "dagger2"
            "hilt-android" -> "hilt_android"
            "hilt-core" -> "hilt_core"
            else -> null
        }

        "com.google.guava" -> when (name) {
            "guava" -> "guava"
            "listenablefuture" -> "guava"
            else -> null
        }

        "com.squareup.okhttp3" -> when (name) {
            "okhttp" -> "okhttp-norepackage"
            else -> null
        }

        "com.squareup.okio" -> when (name) {
            "okio" -> "okio-lib"
            else -> null
        }

        "javax.inject" -> when (name) {
            "javax.inject" -> "jsr330"
            else -> null
        }

        "org.bouncycastle" -> when (name) {
            "bcpkix-jdk15on" -> "bouncycastle-bcpkix-unbundled"
            "bcpkix-jdk18on" -> "bouncycastle-bcpkix-unbundled"
            "bcprov-jdk15on" -> "bouncycastle-unbundled"
            "bcprov-jdk18on" -> "bouncycastle-unbundled"
            else -> null
        }

        "org.jetbrains.kotlin" -> when (name) {
            "kotlin-parcelize-runtime" -> "kotlin-parcelize-runtime"
            "kotlin-stdlib" -> "kotlin-stdlib"
            "kotlin-stdlib-jdk7" -> "kotlin-stdlib-jdk7"
            "kotlin-stdlib-jdk8" -> "kotlin-stdlib-jdk8"
            "kotlin-stdlib-jre7" -> "kotlin-stdlib-jdk7"
            "kotlin-stdlib-jre8" -> "kotlin-stdlib-jdk8"
            else -> null
        }

        "org.jetbrains.kotlinx" -> when (name) {
            "kotlinx-coroutines-android" -> "kotlinx-coroutines-android"
            "kotlinx-coroutines-core" -> "kotlinx-coroutines-core"
            "kotlinx-coroutines-core-jvm" -> "kotlinx-coroutines-core-jvm"
            "kotlinx-coroutines-guava" -> "kotlinx_coroutines_guava"
            "kotlinx-coroutines-reactive" -> "kotlinx_coroutines_reactive"
            "kotlinx-coroutines-rx2" -> "kotlinx_coroutines_rx2"
            "kotlinx-serialization-core" -> "kotlinx_serialization_core"
            "kotlinx-serialization-json" -> "kotlinx_serialization_json"
            else -> null
        }

        "org.jspecify" -> when (name) {
            "jspecify" -> "jspecify"
            else -> null
        }

        else -> null
    } ?: "${group}_${name}"

    /**
     * @see Constants.androidXKmpSuffixes
     */
    private fun ModuleIdentifier.fixupAndroidXKmpSuffix() = when (group.startsWith("androidx.")) {
        true -> androidXKmpSuffixes.firstNotNullOfOrNull {
            when (name.endsWith(it)) {
                true -> "${group}_${name.removeSuffix(it)}"
                false -> null
            }
        }

        false -> null
    }
}
